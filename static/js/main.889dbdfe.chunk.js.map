{"version":3,"sources":["reducers/playerQuestion.ts","assets/svg/trivia-logo.png","services/Api.ts","constants/index.ts","views/WelcomeTrivia/WelcomeTrivia.tsx","components/ProgressBar/ProgressBar.tsx","helpers/decodeHtmlSpecialChar.ts","views/Entertainment/Entertainment.tsx","assets/svg/user.svg","views/Rating/Rating.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PlayerActionTypes","Api","baseUrl","amount","difficulty","fetch","mode","method","then","response","json","Routes","initialState","question","user_answer","playerQuestion","state","action","type","GET_QUESTION","payload","CHECK_QUESTION","WelcomeTrivia","useState","amountInput","setAmountInput","levelGame","setLevelGame","validationAmountFiled","setValidationAmountFiled","history","useHistory","dispatch","useDispatch","updateQuestion","push","VIDEO_GAME","getResult","url","get","className","src","triviaLogo","onChange","event","value","currentTarget","pattern","onInput","test","onClick","ProgressBar","completed","amountQuestion","style","width","backgroundColor","transition","decodeHtmlSpecialChar","safe","replace","Entertainment","useSelector","id","useParams","results","length","HOME","handleAnswerUser","userAnswer","parseInt","RATING","useEffect","questionGame","Rating","emptyPage","setEmptyPage","handlePlayAgainGame","user","filter","index","correct_answer","map","Game","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","combineReducers","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.889dbdfe.chunk.js","sourcesContent":["import {IGETQuestions} from \"../interfaces\";\n\nexport interface PlayerQuestion {\n    question: IGETQuestions | null;\n    user_answer: Array<string>\n}\n\nexport enum PlayerActionTypes {\n    GET_QUESTION = 'GET_QUESTION',\n    CHECK_QUESTION = 'CHECK_QUESTION'\n}\n\ntype Actions = { type: PlayerActionTypes.GET_QUESTION, payload: IGETQuestions }\n    | { type: PlayerActionTypes.CHECK_QUESTION; payload: string };\n\nconst initialState : PlayerQuestion = {\n    question: null,\n    user_answer: []\n}\n\nconst playerQuestion = (state= initialState, action: Actions) => {\n    switch (action.type) {\n        case PlayerActionTypes.GET_QUESTION:\n            return {...state, question: action.payload };\n        case PlayerActionTypes.CHECK_QUESTION:\n            return {...state, user_answer: [...state.user_answer, action.payload]};\n        default:\n            return state;\n    }\n}\n\nexport default playerQuestion;\n","export default __webpack_public_path__ + \"static/media/trivia-logo.b5aac9fc.png\";","export default class Api {\n\tpublic static get<T>(baseUrl: string, amount: string, difficulty: string): Promise<T> {\n\t\treturn fetch( `${baseUrl}/api.php?amount=${amount}&difficulty=${difficulty}&type=boolean`, {\n\t\t\tmode: 'cors',\n\t\t\tmethod: 'GET',\n\t\t}).then((response) => response.json());\n\t}\n}\n","export enum Routes {\n    VIDEO_GAME = '/video-game',\n    RATING = '/rating',\n    HOME = '/'\n}\n","import React, {FC, useState} from \"react\";\nimport triviaLogo from '../../assets/svg/trivia-logo.png';\nimport {Question} from '../../interfaces'\nimport Api from \"../../services/Api\";\nimport {useDispatch} from \"react-redux\";\nimport { useHistory } from 'react-router-dom';\nimport {PlayerActionTypes} from '../../reducers/playerQuestion';\nimport './style.scss'\nimport {Routes} from \"../../constants\";\n\ntype Difficulty = 'hard' | 'easy';\n\nconst WelcomeTrivia: FC = () => {\n\n    const [amountInput, setAmountInput] = useState('');\n    const [levelGame, setLevelGame] = useState<Difficulty>('hard');\n    const [validationAmountFiled, setValidationAmountFiled] = useState(false);\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    const getGameLevel = (event: React.ChangeEvent<HTMLSelectElement>): void => {\n        const { value } = event.currentTarget;\n        setLevelGame(value as Difficulty)\n    }\n\n    const handleAmountChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        const { value } = event.currentTarget;\n        if ( /^\\d*$/.test(value))\n            setAmountInput(value);\n    }\n\n    const startGame = () => {\n        const url = 'https://opentdb.com';\n        if (amountInput === '') {\n            setValidationAmountFiled(true);\n            return;\n        }\n        getResult(url, levelGame)\n    }\n\n\n    const updateQuestion = (question: Question): void => {\n        dispatch({ type: PlayerActionTypes.GET_QUESTION, payload: question });\n        history.push(`${Routes.VIDEO_GAME}/0`)\n    }\n\n    const getResult = (url: string, levelGame: string) => {\n        Api.get<Question>(url, amountInput, levelGame).then(updateQuestion)\n    }\n\n    return (\n        <div className=\"welcomeTrivia\">\n            <div className=\"decorationBox\">\n                <span className=\"decoration decoration--1\" />\n                <span className=\"decoration decoration--2\" />\n                <span className=\"decoration decoration--3\" />\n                <span className=\"decoration decoration--4\" />\n                <span className=\"decoration decoration--5\" />\n            </div>\n\n            <div className=\"container welcomeTrivia__wrapper\">\n                <div>\n                    <h4 className=\"welcomeTrivia__header\">Welcome to the</h4>\n                    <img className=\"welcomeTrivia__logo\" src={triviaLogo} />\n                </div>\n                <div className=\"welcomeTrivia__form\">\n                    <span className=\"welcomeTrivia__text welcomeTrivia__text--difficulty\">Difficulty</span>\n                    <div className=\"welcomeTrivia__difficulty\">\n                        <select className=\"welcomeTrivia__select inputElement\" onChange={getGameLevel}>\n                            <option value=\"hard\">hard</option>\n                            <option value=\"easy\">easy</option>\n                        </select>\n                    </div>\n                    <span className=\"welcomeTrivia__text welcomeTrivia__text--amount\">Amount</span>\n                    <input pattern=\"\\d*\" value={amountInput} onInput={handleAmountChange} className={`welcomeTrivia__amount inputElement ${validationAmountFiled ? 'welcomeTrivia__amount--wrongValidation' : ''}`}/>\n                    <button onClick={startGame} className=\"welcomeTrivia__button buttonElement\">START</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default WelcomeTrivia;\n","import React, {FC} from 'react'\nimport './style.scss'\n\ninterface ProgressBarProps {\n    completed: number,\n    amountQuestion: number\n}\n\nconst ProgressBar: FC<ProgressBarProps> = ({ completed , amountQuestion}) => {\n\n    return (\n        <div className=\"progressBar\">\n            <div style={{ width: `${(100 / amountQuestion) * completed }% `, backgroundColor: \"#FF7878\", transition: 'width .3s' }} className=\"progressBar__fill\">\n                <span className=\"progressBar__label\"><span>{`${completed >= 10 ? '' : 0}${completed}/`}</span>{`${amountQuestion}`}</span>\n            </div>\n        </div>\n    );\n}\n\nexport default ProgressBar;\n","const decodeHtmlSpecialChar = (safe: string): string => {\n    return safe.replace(/&amp;/g, '&')\n        .replace(/&lt;/g, '<')\n        .replace(/&gt;/g, '>')\n        .replace(/&quot;/g, '\"')\n        .replace(/&#039;/g, \"'\");\n}\n\nexport default decodeHtmlSpecialChar;\n","import React, {FC, useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {IReduxState} from '../../'\nimport {PlayerActionTypes, PlayerQuestion} from \"../../reducers/playerQuestion\";\nimport {useParams, useHistory} from 'react-router-dom';\nimport {Routes} from \"../../constants\";\nimport ProgressBar from \"../../components/ProgressBar/ProgressBar\";\nimport {decodeHtmlSpecialChar} from '../../helpers'\nimport './style.scss'\n\ntype trueOrFalse = 'True' | 'False';\n\nconst Entertainment: FC = () => {\n    const {question} = useSelector<IReduxState, PlayerQuestion>((state) => state.playerQuestion)\n    const {id} = useParams<{ id?: string }>();\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    const amountQuestion = question?.results.length;\n\n    if (!id || !question) {\n        history.push(Routes.HOME)\n    }\n\n    const handleAnswerUser = (userAnswer: trueOrFalse) => {\n        if (parseInt(id!) + 1 > amountQuestion!) {\n            history.push(`${Routes.RATING}`)\n            return;\n        }\n\n        dispatch({type: PlayerActionTypes.CHECK_QUESTION, payload: userAnswer});\n        history.push(`${Routes.VIDEO_GAME}/${parseInt(id!, 10) + 1}`)\n    }\n\n    useEffect(() => {\n        if (!question?.results[parseInt(id!, 10)]) {\n            history.push(Routes.RATING)\n            return;\n        }\n    }, [id])\n\n\n    const questionGame  = question?.results[parseInt(id!, 10)]?.question || '';\n\n    return (\n        <div className=\"entertainment\">\n            <div className=\"decorationBox\">\n                <span className=\"entertainment__decoration entertainment__decoration--1\"/>\n                <span className=\"entertainment__decoration entertainment__decoration--2\"/>\n                <span className=\"entertainment__decoration entertainment__decoration--3\"/>\n                <span className=\"entertainment__decoration entertainment__decoration--4\"/>\n                <span className=\"entertainment__decoration entertainment__decoration--5\"/>\n            </div>\n            <div className=\"container entertainment__wrapper\">\n                <h4 className=\"entertainment__header\">Entertainment: <br/>Videogames</h4>\n                <span className=\"entertainment__level\">level 1</span>\n                <ProgressBar amountQuestion={amountQuestion!} completed={parseInt(id!, 10) + 1}/>\n                <p className=\"entertainment__question\">{decodeHtmlSpecialChar(questionGame!)}</p>\n                <div className=\"entertainment__buttonBox\">\n                    <button onClick={() => handleAnswerUser('True')} className=\"buttonElement\">TRUE</button>\n                    <button onClick={() => handleAnswerUser('False')} className=\"buttonElement\">FALSE</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Entertainment;\n","export default __webpack_public_path__ + \"static/media/user.2224bc3d.svg\";","import React, {FC, useEffect, useState} from \"react\";\nimport './style.scss'\nimport {useHistory} from 'react-router-dom';\nimport {useSelector} from \"react-redux\";\nimport {IReduxState} from \"../../index\";\nimport {PlayerQuestion} from \"../../reducers/playerQuestion\";\nimport {decodeHtmlSpecialChar} from \"../../helpers\";\nimport user from '../../assets/svg/user.svg';\nimport {Routes} from \"../../constants\";\n\nconst Rating: FC = () => {\n    const {question, user_answer} = useSelector<IReduxState, PlayerQuestion>((state) => state.playerQuestion);\n    const [emptyPage, setEmptyPage] = useState(true);\n    const history = useHistory();\n\n    const amount = question?.results.length;\n\n\n    const handlePlayAgainGame = () => {\n        history.push(Routes.HOME);\n    }\n\n    useEffect(() => {\n        if (typeof amount === 'undefined') {\n            setEmptyPage(false);\n        }\n    }, [])\n\n    return (\n        <div className=\"rating\">\n            <div className=\"container rating__wrapper\">\n                {emptyPage ? (\n                    <>\n                        <div className=\"decorationBox\">\n                            <span className=\"decoration decoration--1\"/>\n                            <span className=\"decoration decoration--2\"/>\n                            <span className=\"decoration decoration--3\"/>\n                            <span className=\"decoration decoration--4\"/>\n                            <span className=\"decoration decoration--5\"/>\n                            <span className=\"decoration decoration--6\"/>\n                        </div>\n\n                        <>\n                            <div className=\"rating__scoredBox\">\n                                <img src={user}/>\n                                <p className=\"rating__scored\">\n                                    You scored\n                                    <span>{question?.results.filter(({correct_answer}, index) => correct_answer === user_answer[index]).length}</span>\n                                    /{amount}\n                                </p>\n                                <span onClick={handlePlayAgainGame} className=\"rating__cancelIcon\"/>\n                            </div>\n                        </>\n\n\n                        <div className=\"rating__boxes\">\n                            {question?.results.map(({question, correct_answer}, index) => (\n                                <div key={index}\n                                     className={`rating__box rating__box--${correct_answer === user_answer[index] ? 'correctAnswer' : 'incorrectAnswer'}`}>\n                                    <p>{decodeHtmlSpecialChar(question)}</p>\n                                </div>\n                            ))}\n                        </div>\n                        <button onClick={handlePlayAgainGame} className=\"rating__button buttonElement\">PLAY AGAIN\n                        </button>\n                    </>\n                ) : (\n                    <button onClick={handlePlayAgainGame} className=\"rating__button buttonElement\">PLAY AGAIN</button>\n                )}\n            </div>\n        </div>\n\n    )\n}\n\nexport default Rating;\n","import React, {FC } from 'react';\nimport {\n    HashRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport './App.scss'\nimport {WelcomeTrivia, Entertainment, Rating} from \"./views\";\nimport {Routes} from \"./constants\";\n\n\nconst Game: FC = () => {\n    return (\n        <>\n            <Router>\n                <Switch>\n                    <Route path={`${Routes.VIDEO_GAME}/:id?`}>\n                        <Entertainment/>\n                    </Route>\n                    <Route path={Routes.RATING}>\n                        <Rating/>\n                    </Route>\n                    <Route exact path={Routes.HOME}>\n                        <WelcomeTrivia />\n                    </Route>\n                </Switch>\n            </Router>\n        </>\n    )\n}\n\nexport default Game;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { combineReducers, createStore } from 'redux';\nimport playerQuestion, {PlayerQuestion} from './reducers/playerQuestion'\n\nexport interface IReduxState {\n    playerQuestion: PlayerQuestion\n}\n\nexport const store = createStore(\n    combineReducers({\n        playerQuestion: playerQuestion,\n    }),\n);\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}